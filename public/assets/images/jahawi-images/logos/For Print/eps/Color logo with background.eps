%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 841
%%HiResBoundingBox: 0 0 2391.1199 840.95996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 840.95996 re
W
q
[0.24 0 0 -0.24 0 840.95996] cm
q
0 0 9962.5 3503.125 re
W*
q
[3.125454 0 0 3.124615 0.0585751 0] cm
/DeviceRGB {} CS
[0.0157 0.0863 0.2078] SC
/DeviceRGB {} cs
[0.0157 0.0863 0.2078] sc
0 0 3187.5 1121.13818 re
f
Q
q
[32.556629 0 0 32.547894 130.302597 124.163666] cm
/DeviceRGB {} CS
[0.2784 0.6706 1] SC
/DeviceRGB {} cs
[0.2784 0.6706 1] sc
5.337 94.815002 m
69.751999 94.815002 l
69.751999 77.766998 l
5.337 80.380997 l
5.337 94.815002 l
h
f
5.337 43.425999 m
5.337 48.341 5.337 53.235001 5.337 58.127998 c
23.212 47.714996 44.661003 44.363998 69.751999 48.162998 c
69.751999 42.397999 69.751999 36.633999 69.751999 30.869999 c
49.220001 26.712 27.792 30.534 5.337 43.425999 c
h
f
72.835999 8.816 m
72.433998 36.766998 73.684998 66.862999 73.282997 94.814003 c
80.521996 94.814003 87.760994 94.814003 95 94.814003 c
95 71.912003 95 49.010002 95 26.109001 c
89.838997 19.115999 81.438004 11.834 72.835999 8.816 c
h
f
5.337 24.211 m
5.494 29.349001 4.868 34.645 5.025 39.784 c
20.575001 27.809 40.661003 20.077 69.751999 24.211 c
69.751999 18.67 69.751999 13.151 69.751999 7.631001 c
50.827999 2.337 30.094 4.683 5.337 24.211 c
h
f
5.337 61.323002 m
5.337 66.462006 5.337 71.600998 5.337 76.716003 c
26.25 71.287003 47.587997 70.394005 69.751999 71.287003 c
69.751999 66.259003 69.751999 58.998001 69.751999 53.971001 c
46.493 51.827 25.156 54.619999 5.337 61.323002 c
h
f
Q
q
[53.178089 0 0 53.163815 3798.5696 1101.87329] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
7.24 20 m
5.98 20 l
0.2 5 l
2.58 5 l
6.62 16.040001 l
10.639999 5.000001 l
13.02 5.000001 l
7.24 20 l
h
16.780001 10.12 m
16.780001 20 l
14.720001 20 l
14.720001 10.12 l
16.780001 10.12 l
h
16.879999 6.5 m
16.879999 7.14 16.379999 7.64 15.739999 7.64 c
15.119999 7.64 14.619999 7.14 14.619999 6.5 c
14.619999 5.88 15.119999 5.38 15.739999 5.38 c
16.379999 5.38 16.879999 5.88 16.879999 6.5 c
h
21.959999 4.62 m
21.959999 20 l
19.879999 20 l
19.879999 4.62 l
21.959999 4.62 l
h
27.24 4.62 m
27.24 20 l
25.16 20 l
25.16 4.62 l
27.24 4.62 l
h
34.459999 9.92 m
37.299999 9.92 38.439999 11.64 38.439999 13.1 c
38.439999 20 l
36.379997 20 l
36.379997 18.92 l
35.659996 19.9 34.379997 20.18 33.579998 20.18 c
31.319998 20.18 29.839998 18.860001 29.839998 17.1 c
29.839998 14.64 31.679998 13.76 33.579998 13.76 c
36.379997 13.76 l
36.379997 13.1 l
36.379997 12.480001 36.139996 11.620001 34.459999 11.620001 c
33.52 11.620001 32.66 12.120001 32.099998 12.900001 c
30.679998 11.620001 l
31.619999 10.580001 32.959999 9.920001 34.459999 9.920001 c
34.459999 9.92 l
h
36.380001 16.92 m
36.380001 15.440001 l
33.860001 15.440001 l
32.639999 15.440001 31.780001 16.060001 31.92 17.18 c
32.040001 18.120001 32.799999 18.5 33.860001 18.5 c
35.760002 18.5 36.380001 17.6 36.380001 16.92 c
h
54.439999 5 m
56.68 5 l
56.68 15.26 l
56.68 17.68 55.5 20.200001 51.82 20.200001 c
48.139999 20.200001 46.919998 17.68 46.919998 15.26 c
49.139999 15.26 l
49.139999 16.16 49.220001 18.360001 51.82 18.360001 c
54.419998 18.360001 54.439999 16.16 54.439999 15.26 c
54.439999 5 l
h
63.5 9.92 m
66.339996 9.92 67.480003 11.64 67.480003 13.1 c
67.480003 20 l
65.420006 20 l
65.420006 18.92 l
64.700005 19.9 63.420006 20.18 62.620007 20.18 c
60.360008 20.18 58.880005 18.860001 58.880005 17.1 c
58.880005 14.64 60.720005 13.76 62.620007 13.76 c
65.420006 13.76 l
65.420006 13.1 l
65.420006 12.480001 65.180008 11.620001 63.500008 11.620001 c
62.560009 11.620001 61.700008 12.120001 61.140007 12.900001 c
59.720009 11.620001 l
60.660007 10.580001 62.000008 9.920001 63.500008 9.920001 c
63.5 9.92 l
h
65.419998 16.92 m
65.419998 15.440001 l
62.899998 15.440001 l
61.679996 15.440001 60.82 16.060001 60.959999 17.18 c
61.079998 18.120001 61.84 18.5 62.899998 18.5 c
64.799995 18.5 65.419998 17.6 65.419998 16.92 c
h
79.300003 14.3 m
79.300003 20 l
77.240005 20 l
77.240005 14.5 l
77.240005 12.5 76.620003 11.62 74.920006 11.62 c
73.000008 11.62 72.220009 12.96 72.220009 14.7 c
72.220009 20 l
70.160011 20 l
70.160011 5 l
72.220009 5 l
72.220009 11.719999 l
72.500008 10.839999 73.740005 10.039999 74.920006 9.959999 c
77.600006 9.759999 79.300003 11.06 79.300003 14.299999 c
79.300003 14.3 l
h
86.120003 9.92 m
88.960007 9.92 90.100006 11.64 90.100006 13.1 c
90.100006 20 l
88.040009 20 l
88.040009 18.92 l
87.320007 19.9 86.040009 20.18 85.240005 20.18 c
82.980003 20.18 81.500008 18.860001 81.500008 17.1 c
81.500008 14.64 83.340004 13.76 85.240005 13.76 c
88.040009 13.76 l
88.040009 13.1 l
88.040009 12.480001 87.800011 11.620001 86.12001 11.620001 c
85.180008 11.620001 84.320007 12.120001 83.76001 12.900001 c
82.340012 11.620001 l
83.280014 10.580001 84.62001 9.920001 86.12001 9.920001 c
86.120003 9.92 l
h
88.040001 16.92 m
88.040001 15.440001 l
85.520004 15.440001 l
84.300003 15.440001 83.440002 16.060001 83.580002 17.18 c
83.700005 18.120001 84.459999 18.5 85.520004 18.5 c
87.420006 18.5 88.040001 17.6 88.040001 16.92 c
h
104.480003 10.12 m
106.540001 10.12 l
102.779999 20 l
101.519997 20 l
99.059998 13.6 l
96.619995 20 l
95.359993 20 l
91.579994 10.12 l
93.659996 10.12 l
95.999992 17.02 l
98.05999 10.940001 l
98.319992 10.120001 l
99.799995 10.120001 l
100.079994 10.940001 l
102.139992 17.02 l
104.480003 10.12 l
h
110.300003 10.12 m
110.300003 20 l
108.240005 20 l
108.240005 10.12 l
110.300003 10.12 l
h
110.400002 6.5 m
110.400002 7.14 109.900002 7.64 109.260002 7.64 c
108.639999 7.64 108.139999 7.14 108.139999 6.5 c
108.139999 5.88 108.639999 5.38 109.260002 5.38 c
109.900002 5.38 110.400002 5.88 110.400002 6.5 c
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
